/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/indian_man.glb -o src/components/Indian.jsx -r public 
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useLoader, useFrame } from "@react-three/fiber";
import { useGLTF, useFBX, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useControls } from "leva";

import * as THREE from "three";

// Map Rhubarb visemes to Oculus visemes to enable lip sync
const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

export function Avatar_Indian_Man({ chosen_script, ...props }) {
  const { playAudio, script } = useControls({
    playAudio: false,
    script: {
      value: chosen_script,
      options: ["hello", "niraj"],
    },
  });

  //Load the audio file, memoise the audio so that it will not be reloaded at each render
  const audio = useMemo(
    () => new Audio(`/audios/${chosen_script}.mp3`, [script])
  );

  useEffect(() => {
    if (playAudio) {
      audio.play();
      setAnimation("Talking");
    } else {
      setAnimation("Salute");
      audio.pause();
    }
  }, [playAudio, script]);

  // Control lips of avatar
  // Load JSON file generated by Rhubarb
  //const jsonFile = useLoader(THREE.FileLoader, `audios/${script}.json`);
  //const lipsync = JSON.parse(jsonFile);

  // // Ensure that code below is called at every frame
  // useFrame(() => {
  //   const currentAudioTime = audio.currentTime;

  // //Reset the frame so that multiple sounds will not be played
  // Object.values(corresponding).forEach((value) => {
  //   nodes.Wolf3D_Head.morphTargetInfluences[
  //     nodes.Wolf3D_Head.morphTargetDictionary[value]
  //   ] = 0;
  //   nodes.Wolf3D_Teeth.morphTargetInfluences[
  //     nodes.Wolf3D_Body,morphTargetDictionary[value]
  //   ] = 0;
  // });

  //   for (let i = 0; i < lipsync.mouthCues.length;i++) {
  //     const mouthCue = lipsync.mouthCues[i];
  //     if (currentAudioTime >= mouthCue.start && currentAudioTime <= mouthCue.end) {
  //       nodes.Wolf3D_Head.morphTargetInfluences[
  //         nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]
  //       ] = 1;
  //       nodes.Wolf3D_Teeth.morphTargetInfluences[
  //         nodes.Wolf3D_Body,morphTargetDictionary[corresponding[mouthCue.value]]
  //       ] = 1;
  //       break;
  //     }
  //   }
  // });

  // Load avatar
  const { scene } = useGLTF("/models/indian_man.glb");
  const { nodes, materials } = useGLTF("/models/indian_man.glb");

  // Load animations
  const { animations: saluteAnimation } = useFBX("/animations/Salute.fbx");
  const { animations: talkingAnimation } = useFBX("/animations/Talking.fbx");
  // Rename animations
  saluteAnimation[0].name = "Salute";
  talkingAnimation[0].name = "Talking";
  // Assign variable to know what animation is currently playing
  const [animation, setAnimation] = useState("Salute");

  const group = useRef();
  const { actions } = useAnimations(
    [saluteAnimation[0], talkingAnimation[0]],
    group
  );

  // Call function when animation is changed
  useEffect(() => {
    if (actions[animation]) {
      // Ensure that animations fade in and out smoothly
      actions[animation].reset().fadeIn(0.5).play();
    }
    return () => {
      if (actions[animation]) {
        actions[animation].fadeOut(0.5);
      }
    };
  }, [animation, actions]);

  return (
    <group {...props} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Glasses.geometry}
        material={materials.Wolf3D_Glasses}
        skeleton={nodes.Wolf3D_Glasses.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/indian_man.glb");
