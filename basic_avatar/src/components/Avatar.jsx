/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/models/asian_lady.glb -o src/components/Avatar.jsx -r public 
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useLoader, useFrame } from '@react-three/fiber'
import { useGLTF, useFBX, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useControls } from "leva";

import *  as THREE from "three";

// Map Rhubarb visemes to Oculus visemes to enable lip sync 
const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

export function Avatar(props) {

const { playAudio, script } = useControls({
  playAudio: false,
  script: {
    value: "hello",
    options: ["hello","hello"]
  }
});

//Load the audio file, memoise the audio so that it will not be reloaded at each render 
const audio = useMemo(() => new Audio(`/audios/${script}.mp3`, [script])); 

useEffect(() => {
  if (playAudio) {
    audio.play();
    setAnimation("Greeting")
  } else {
    setAnimation("Idle");
    audio.pause();
  }
}, [playAudio, script]);

// Control lips of avatar 
// Load JSON file generated by Rhubarb
const jsonFile = useLoader(THREE.FileLoader, `audios/${script}.json`);
const lipsync = JSON.parse(jsonFile);

// // Ensure that code below is called at every frame 
// useFrame(() => {
//   const currentAudioTime = audio.currentTime;

// //Reset the frame so that multiple sounds will not be played 
// Object.values(corresponding).forEach((value) => {
//   nodes.Wolf3D_Head.morphTargetInfluences[
//     nodes.Wolf3D_Head.morphTargetDictionary[value]
//   ] = 0;
//   nodes.Wolf3D_Teeth.morphTargetInfluences[
//     nodes.Wolf3D_Body,morphTargetDictionary[value]
//   ] = 0;
// });

//   for (let i = 0; i < lipsync.mouthCues.length;i++) {
//     const mouthCue = lipsync.mouthCues[i];
//     if (currentAudioTime >= mouthCue.start && currentAudioTime <= mouthCue.end) {
//       nodes.Wolf3D_Head.morphTargetInfluences[
//         nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]
//       ] = 1;
//       nodes.Wolf3D_Teeth.morphTargetInfluences[
//         nodes.Wolf3D_Body,morphTargetDictionary[corresponding[mouthCue.value]]
//       ] = 1;
//       break;
//     }
//   }
// });


  // Load avatar
  const { scene } = useGLTF('/models/asian_lady.glb')
  const { nodes, materials } = useGLTF("/models/asian_lady.glb");

  // Load animations
  const { animations: idleAnimation } = useFBX("/animations/Idle.fbx");
  const { animations: standingGreetingAnimation } = useFBX("/animations/Standing Greeting.fbx")
  const { animations: thinkingAnimation } = useFBX("/animations/Thinking.fbx")
  // Rename animations
  idleAnimation[0].name = "Idle";
  standingGreetingAnimation[0].name = "Greeting";
  thinkingAnimation[0].name = "Thinking";
  // Assign variable to know what animation is currently playing
  const [animation, setAnimation] = useState("Idle");

  const group = useRef();
  const { actions } = useAnimations([idleAnimation[0],standingGreetingAnimation[0], thinkingAnimation[0]], group);

  // Call function when animation is changed
  useEffect(() => {
    // Ensure that animations fade in and out smoothly 
    actions[animation].reset().fadeIn(0.5).play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload('/models/asian_lady.glb')
